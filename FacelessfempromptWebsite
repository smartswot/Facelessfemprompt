////////////////////////////////////
// MAINCOMPONENT.JSX or PAGE.JSX
////////////////////////////////////
"use client";
import React, { useState, useEffect } from "react";
// If using Next.js 13+ App Router, "use client" ensures this is a client component

// If you’re using your custom hook for streaming responses:
import { useHandleStreamResponse } from "../utilities/runtime-helpers";

// Example: We'll import Next.js Head for SEO (if you prefer that approach)
// import Head from "next/head";

function MainComponent() {
  ////////////////////////////////////////////
  // STATE HOOKS
  ////////////////////////////////////////////
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [businessNeeds, setBusinessNeeds] = useState("");
  const [promptType, setPromptType] = useState("");
  const [generatedPrompt, setGeneratedPrompt] = useState("");
  const [streamingMessage, setStreamingMessage] = useState("");
  const [contactForm, setContactForm] = useState({
    name: "",
    email: "",
    message: "",
  });
  const [activeTestimonial, setActiveTestimonial] = useState(0);

  // Our product/service packages
  const services = [
    {
      title: "Faceless Sovereign Suite",
      price: "27",
      features: [
        "10 Custom AI Prompts",
        "Faceless Growth Starter Kit",
        "Email Support",
      ],
    },
    {
      title: "Faceless Empire Accelerator",
      price: "497",
      features: [
        "25 Custom AI Prompts",
        "AI Prompt Engineering Playbook",
        "Priority Email Support",
        "AI Advanced Prompt Vault",
      ],
    },
    {
      title: "Faceless Legacy Collection",
      price: "1997",
      features: [
        "50 Custom AI Prompts",
        "All in Empire Accelerator",
        "24/7 Priority Support",
        "Advanced CHATGPT Prompts (o1 pro and behind)",
        "1-1 Call",
      ],
    },
  ];

  // Testimonials
  const testimonials = [
    {
      name: "Victoria Chase",
      role: "7-Figure eCommerce CEO",
      content:
        "Using these AI prompts, I scaled my luxury brand to 7-figures while maintaining complete privacy. The ROI has been extraordinary.",
      image: "/testimonial-1.jpg",
    },
    {
      name: "Alexandra Rivers",
      role: "High-Ticket Coach",
      content:
        "This system helped me close $50k+ clients consistently without ever showing my face. A game-changer for high-end service providers.",
      image: "/testimonial-2.jpg",
    },
    {
      name: "Elizabeth Morgan",
      role: "Luxury Brand Strategist",
      content:
        "The premium positioning these prompts create is unmatched. I've built a multi-million dollar empire while staying completely private.",
      image: "/testimonial-3.jpg",
    },
  ];

  // Sample prompts
  const examplePrompts = [
    {
      type: "Luxury Brand Positioning",
      prompt:
        "Create a high-ticket offer announcement that positions [your service] as the premier choice for elite entrepreneurs seeking privacy-first business growth",
    },
    {
      type: "Premium Email Sequence",
      prompt:
        "Design a 5-part email sequence for high-net-worth prospects that builds exclusivity and desire without personal imagery",
    },
    {
      type: "High-Ticket Sales Strategy",
      prompt:
        "Develop a premium sales strategy that converts 6-figure clients through value-based content while maintaining complete privacy",
    },
  ];

  ////////////////////////////////////////////
  // STREAM HANDLER (If using your custom hook)
  ////////////////////////////////////////////
  const handleStreamResponse = useHandleStreamResponse({
    onChunk: setStreamingMessage,
    onFinish: (message) => {
      setGeneratedPrompt(message);
      setLoading(false);
    },
  });

  ////////////////////////////////////////////
  // HANDLERS
  ////////////////////////////////////////////
  const handleGeneratePrompt = async () => {
    if (!businessNeeds || !promptType) {
      setError("Please fill in all fields");
      return;
    }

    setLoading(true);
    setError(null);
    setGeneratedPrompt("");

    try {
      const response = await fetch("/integrations/chat-gpt/conversationgpt4", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          messages: [
            {
              role: "system",
              content:
                "You are an expert AI prompt engineer specializing in helping women entrepreneurs who prefer not to show their face online. Your goal is to create effective prompts that help them market their business while maintaining privacy.",
            },
            {
              role: "user",
              content: `Create a detailed AI prompt for the following business need: ${businessNeeds}. This is for ${promptType} purposes. The prompt should help generate content that doesn't require showing face or personal images.`,
            },
          ],
          stream: true,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to generate prompt");
      }

      handleStreamResponse(response);
    } catch (err) {
      console.error(err);
      setError("Failed to generate prompt. Please try again.");
      setLoading(false);
    }
  };

  const handleContactSubmit = async (e) => {
    e.preventDefault();
    // Example: hooking up to a backend or email service
    alert(
      `Thank you, ${contactForm.name}. We'll be in touch at ${contactForm.email}.`
    );
    setContactForm({ name: "", email: "", message: "" });
  };

  const handleCopyPrompt = () => {
    navigator.clipboard.writeText(generatedPrompt);
  };

  ////////////////////////////////////////////
  // RENDER
  ////////////////////////////////////////////
  return (
    <>
      {/* 
        NOTE: In Next.js, you’d typically use <Head> from "next/head" 
        for SEO meta tags. We’re showing a simplified approach here. 
      */}
      <div className="min-h-screen bg-[#0c0c0c] text-[#ffffff]">
        {/* NAVBAR */}
        <nav className="fixed w-full bg-[#0c0c0c]/90 backdrop-blur-sm z-50 py-4">
          <div className="container mx-auto px-4">
            <div className="text-2xl font-playfair text-[#c6a972] text-center">
              Elite AI Prompt Engineering
            </div>
          </div>
        </nav>

        {/* HERO / HEADER */}
        <header className="pt-32 pb-20 bg-[#1e1e1e]">
          <div className="container mx-auto px-4">
            <div className="max-w-3xl mx-auto text-center">
              <h1
                className="text-5xl md:text-7xl font-playfair font-bold mb-6 text-[#c6a972]"
                style={{ animation: "fadeIn 1s ease-out" }}
              >
                Elite AI Prompt Engineering for Visionary Women Leaders
              </h1>
              <p className="text-xl font-montserrat text-[#b09363] mb-8">
                Build a Powerful, Privacy-First Empire. You vs You.
              </p>
            </div>
          </div>
        </header>

        {/* MAIN CONTENT */}
        <main className="py-20 bg-[#0c0c0c]">
          <div className="container mx-auto px-4">
            <div className="max-w-2xl mx-auto">
              {/* Prompt Generation Form */}
              <div className="mb-8">
                <textarea
                  name="businessNeeds"
                  placeholder="Describe your empire's vision..."
                  value={businessNeeds}
                  onChange={(e) => setBusinessNeeds(e.target.value)}
                  className="w-full p-4 rounded-lg border border-[#c6a972] bg-[#1e1e1e] text-[#ffffff] font-montserrat h-32 mb-4 focus:border-[#c6a972] focus:ring-[#c6a972] transition-all duration-300"
                  required
                  style={{ animation: "borderGlow 2s infinite" }}
                />
                <select
                  name="promptType"
                  value={promptType}
                  onChange={(e) => setPromptType(e.target.value)}
                  className="w-full p-4 rounded-lg border border-[#c6a972] bg-[#1e1e1e] text-[#ffffff] font-montserrat mb-4 focus:border-[#c6a972] focus:ring-[#c6a972]"
                  required
                >
                  <option value="">Select your focus area</option>
                  <option value="social">Luxury Social Media</option>
                  <option value="email">Premium Email Marketing</option>
                  <option value="strategy">Elite Business Strategy</option>
                  <option value="branding">High-End Personal Branding</option>
                </select>
                <button
                  onClick={handleGeneratePrompt}
                  disabled={loading}
                  className="w-full bg-[#c6a972] text-[#0c0c0c] font-montserrat py-4 rounded-lg hover:bg-[#b09363] transition-colors disabled:opacity-50"
                >
                  {loading ? "Crafting Your Prompt..." : "Generate Elite Prompt"}
                </button>
              </div>

              {error && (
                <div className="p-4 bg-red-900/20 text-red-400 rounded-lg mb-8 font-montserrat">
                  {error}
                </div>
              )}

              {/* Generated Prompt */}
              {generatedPrompt && (
                <div className="p-6 bg-[#1e1e1e] rounded-lg border border-[#c6a972]">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-xl font-playfair font-bold text-[#c6a972]">
                      Your Custom Prompt
                    </h3>
                    <button
                      onClick={handleCopyPrompt}
                      className="text-[#c6a972] hover:text-[#b09363]"
                    >
                      <i className="far fa-copy mr-2"></i>
                      Copy
                    </button>
                  </div>
                  <p className="text-[#ffffff] font-montserrat whitespace-pre-wrap">
                    {generatedPrompt}
                  </p>
                </div>
              )}

              {/* Example Prompts */}
              <div className="mt-16">
                <h2 className="text-2xl font-playfair font-bold mb-6 text-[#c6a972]">
                  Premium Prompt Examples
                </h2>
                <div className="grid gap-6">
                  {examplePrompts.map((example, index) => (
                    <div
                      key={index}
                      className="p-6 bg-[#1e1e1e] rounded-lg border border-[#c6a972]"
                    >
                      <h3 className="font-playfair font-bold mb-2 text-[#c6a972]">
                        {example.type}
                      </h3>
                      <p className="text-[#ffffff] font-montserrat">
                        {example.prompt}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </main>

        {/* SERVICES */}
        <section id="services" className="py-20">
          <div className="container mx-auto px-4">
            <h2 className="text-4xl font-bold text-center mb-12">Services</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              {services.map((service, index) => (
                <div
                  key={index}
                  className="p-8 border border-gray-200 dark:border-gray-700 rounded-xl"
                >
                  <h3 className="text-2xl font-bold mb-4">{service.title}</h3>
                  <p className="text-4xl font-bold mb-6">${service.price}</p>
                  <ul className="space-y-4 mb-8">
                    {service.features.map((feature, i) => (
                      <li key={i} className="flex items-center">
                        <i className="fas fa-check text-teal-600 mr-2"></i>
                        <span>{feature}</span>
                      </li>
                    ))}
                  </ul>
                  <button className="w-full bg-gray-900 dark:bg-white text-white dark:text-gray-900 py-3 rounded-md hover:bg-gray-700 dark:hover:bg-gray-100 transition-colors">
                    Choose Plan
                  </button>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* TESTIMONIALS */}
        <section
          id="testimonials"
          className="py-20 bg-gray-50 dark:bg-gray-800"
        >
          <div className="container mx-auto px-4">
            <h2 className="text-4xl font-bold text-center mb-12">
              Client Success Stories
            </h2>
            <div className="max-w-3xl mx-auto">
              <div className="relative">
                {testimonials.map((testimonial, index) => (
                  <div
                    key={index}
                    className={`transition-opacity duration-500 ${
                      activeTestimonial === index
                        ? "opacity-100"
                        : "opacity-0 absolute top-0"
                    }`}
                  >
                    <div className="text-center">
                      <img
                        src={testimonial.image}
                        alt={testimonial.name}
                        className="w-20 h-20 rounded-full mx-auto mb-4"
                      />
                      <p className="text-xl mb-4">{testimonial.content}</p>
                      <p className="font-bold">{testimonial.name}</p>
                      <p className="text-gray-700 dark:text-gray-300">
                        {testimonial.role}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
              <div className="flex justify-center mt-8 space-x-2">
                {testimonials.map((_, index) => (
                  <button
                    key={index}
                    onClick={() => setActiveTestimonial(index)}
                    className={`w-3 h-3 rounded-full ${
                      activeTestimonial === index
                        ? "bg-teal-600"
                        : "bg-gray-300 dark:bg-gray-600"
                    }`}
                  />
                ))}
              </div>
            </div>
          </div>
        </section>

        {/* BLOG */}
        <section id="blog" className="py-20">
          <div className="container mx-auto px-4">
            <h2 className="text-4xl font-bold text-center mb-12">
              Latest Insights
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-12">
              {[1, 2, 3].map((_, index) => (
                <div
                  key={index}
                  className="border border-gray-200 dark:border-gray-700 rounded-xl overflow-hidden"
                >
                  <img
                    src={`/blog-${index + 1}.jpg`}
                    alt="Blog post"
                    className="w-full h-48 object-cover"
                  />
                  <div className="p-6">
                    <h3 className="text-xl font-bold mb-2">
                      Strategic Brand Development
                    </h3>
                    <p className="text-gray-700 dark:text-gray-300 mb-4">
                      Learn the essential steps to develop a powerful brand
                      identity.
                    </p>
                    <a href="#" className="text-teal-600 hover:underline">
                      Read More →
                    </a>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* CONTACT */}
        <section id="contact" className="py-20 bg-[#1e1e1e]">
          <div className="container mx-auto px-4">
            <div className="max-w-xl mx-auto">
              <h2 className="text-4xl font-playfair font-bold text-center mb-12 text-[#c6a972]">
                Reserve Your Strategy Call
              </h2>
              <form onSubmit={handleContactSubmit} className="space-y-6">
                <div>
                  <input
                    type="text"
                    name="name"
                    placeholder="Your Name"
                    value={contactForm.name}
                    onChange={(e) =>
                      setContactForm({ ...contactForm, name: e.target.value })
                    }
                    className="w-full p-4 rounded-lg border border-[#c6a972] bg-[#0c0c0c] text-[#ffffff] font-montserrat focus:border-[#c6a972] focus:ring-[#c6a972]"
                    required
                  />
                </div>
                <div>
                  <input
                    type="email"
                    name="email"
                    placeholder="Your Email"
                    value={contactForm.email}
                    onChange={(e) =>
                      setContactForm({ ...contactForm, email: e.target.value })
                    }
                    className="w-full p-4 rounded-lg border border-[#c6a972] bg-[#0c0c0c] text-[#ffffff] font-montserrat focus:border-[#c6a972] focus:ring-[#c6a972]"
                    required
                  />
                </div>
                <div>
                  <textarea
                    name="message"
                    placeholder="Tell us about your empire's vision..."
                    value={contactForm.message}
                    onChange={(e) =>
                      setContactForm({ ...contactForm, message: e.target.value })
                    }
                    className="w-full p-4 rounded-lg border border-[#c6a972] bg-[#0c0c0c] text-[#ffffff] font-montserrat h-32 focus:border-[#c6a972] focus:ring-[#c6a972]"
                    required
                  ></textarea>
                </div>
                {error && (
                  <div className="text-red-400 font-montserrat">{error}</div>
                )}
                <button
                  type="submit"
                  disabled={loading}
                  className="w-full bg-[#c6a972] text-[#0c0c0c] font-montserrat py-4 rounded-lg hover:bg-[#b09363] transition-colors"
                >
                  {loading ? "Sending..." : "Reserve Your Strategy Call"}
                </button>
              </form>
            </div>
          </div>
        </section>

        {/* FOOTER */}
        <footer className="py-8 bg-[#0c0c0c] text-[#ffffff]">
          <div className="container mx-auto px-4 text-center">
            <div className="flex justify-center space-x-6 mb-4">
              <a
                href="#"
                className="text-[#c6a972] hover:text-[#b09363] transition-colors"
              >
                <i className="fab fa-twitter"></i>
              </a>
              <a
                href="#"
                className="text-[#c6a972] hover:text-[#b09363] transition-colors"
              >
                <i className="fab fa-linkedin"></i>
              </a>
              <a
                href="#"
                className="text-[#c6a972] hover:text-[#b09363] transition-colors"
              >
                <i className="fab fa-instagram"></i>
              </a>
            </div>
            <p className="text-[#b09363] font-montserrat">
              © 2025 All rights reserved
            </p>
          </div>
        </footer>

        {/* MOBILE MENU (if needed) */}
        {isMenuOpen && (
          <div className="fixed inset-0 bg-white dark:bg-gray-900 z-50 md:hidden">
            <div className="container mx-auto px-4 py-4">
              <div className="flex justify-between items-center mb-8">
                <div className="text-2xl font-bold">BRAND</div>
                <button onClick={() => setIsMenuOpen(false)}>
                  <i className="fas fa-times text-2xl"></i>
                </button>
              </div>
              <div className="flex flex-col space-y-6">
                <a
                  className="text-xl"
                  href="#features"
                  onClick={() => setIsMenuOpen(false)}
                >
                  Services
                </a>
                <a
                  className="text-xl"
                  href="#about"
                  onClick={() => setIsMenuOpen(false)}
                >
                  About
                </a>
                <a
                  className="text-xl"
                  href="#testimonials"
                  onClick={() => setIsMenuOpen(false)}
                >
                  Testimonials
                </a>
                <button className="bg-gray-900 dark:bg-white text-white dark:text-gray-900 px-6 py-2 rounded-md">
                  Work With Me
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Global Animations */}
        <style jsx global>{`
          @keyframes fadeIn {
            from {
              opacity: 0;
              transform: translateY(10px);
            }
            to {
              opacity: 1;
              transform: translateY(0);
            }
          }
          @keyframes borderGlow {
            0% {
              box-shadow: 0 0 5px #c6a972;
            }
            50% {
              box-shadow: 0 0 20px #c6a972;
            }
            100% {
              box-shadow: 0 0 5px #c6a972;
            }
          }
        `}</style>
      </div>
    </>
  );
}

export default MainComponent;
